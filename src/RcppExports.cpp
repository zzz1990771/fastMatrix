// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// chol_decomp_Rcpp
NumericMatrix chol_decomp_Rcpp(NumericMatrix A);
RcppExport SEXP _fastMatrix_chol_decomp_Rcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(chol_decomp_Rcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_Rcpp
NumericMatrix mat_mult_Rcpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _fastMatrix_mat_mult_Rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_Rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _fastMatrix_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// chol_decomp_RcppArma
arma::mat chol_decomp_RcppArma(arma::mat A);
RcppExport SEXP _fastMatrix_chol_decomp_RcppArma(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(chol_decomp_RcppArma(A));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult_RcppArma
arma::mat mat_mult_RcppArma(arma::mat A, arma::mat B);
RcppExport SEXP _fastMatrix_mat_mult_RcppArma(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult_RcppArma(A, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastMatrix_chol_decomp_Rcpp", (DL_FUNC) &_fastMatrix_chol_decomp_Rcpp, 1},
    {"_fastMatrix_mat_mult_Rcpp", (DL_FUNC) &_fastMatrix_mat_mult_Rcpp, 2},
    {"_fastMatrix_rcpparma_bothproducts", (DL_FUNC) &_fastMatrix_rcpparma_bothproducts, 1},
    {"_fastMatrix_chol_decomp_RcppArma", (DL_FUNC) &_fastMatrix_chol_decomp_RcppArma, 1},
    {"_fastMatrix_mat_mult_RcppArma", (DL_FUNC) &_fastMatrix_mat_mult_RcppArma, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastMatrix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
