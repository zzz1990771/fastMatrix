#generate a AR-1 matrix
p=1000
sigma <- 1
times = 1:p
rho = 0.4
H <- abs(outer(times, times, "-"))
V <- sigma * rho^H

fast_AR1_chol <- function(p,rho){
  L = matrix(0,p,p)
  for (j in 1:p){
    for(i in j:p){
      if(j==1){L[i,j] = rho^(i-j)}else{
        L[i,j] = rho^abs(i-j)*sqrt(1-rho^2)
      }
    }
  }
  return(L)
}


library(microbenchmark)
microbenchmark(
  chol(V),
  fast_AR1_chol(p,rho),
  times = 10  # Number of times to run each method
)

levinson(V)


# Levinson-Durbin Algorithm for Cholesky decomposition of a Toeplitz matrix
cholesky_toeplitz <- function(a) {
  # 'a' is the first row of the Toeplitz matrix
  n <- length(a)
  L <- matrix(0, n, n)
  
  # Initialization
  L[1, 1] <- sqrt(a[1])
  
  # Recursive calculation
  for (k in 2:n) {
    # Compute L[k, k]
    sum_square <- 0
    for (j in 1:(k-1)) {
      sum_square <- sum_square + L[k, j] * L[k, j]
    }
    L[k, k] <- sqrt(a[1] - sum_square)
    
    # Compute the remaining elements of the k-th row
    T_inv_b <- toeplitz(a[1:(k-1)])[1:(k-1), 1:(k-1)] %*% L[k, 1:(k-1)]
    x <- solve(toeplitz(a[1:(k-1)]), a[2:k] - T_inv_b)
    
    L[k, 1:(k-1)] <- x
  }
  
  return(L)
}
